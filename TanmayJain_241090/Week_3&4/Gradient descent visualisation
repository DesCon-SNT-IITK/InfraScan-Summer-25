# import numpy as np
# import matplotlib.pyplot as plt
# from matplotlib import cm

# # Define loss and gradient
# def loss_fn(x, y):
#     return (1 - x)**2 + 100*((y - x**2)**2)

# def grad_fn(x, y):
#     return np.array([2*x, 2*y])

# # Optimization paths
# def optimize(method, lr=0.1, steps=30, batch_size=1, seed=42):
#     np.random.seed(seed)
#     path = []
#     x, y = np.random.randn(2) * 5
#     for _ in range(steps):
#         if method == 'gd':
#             grad = grad_fn(x, y)
#         elif method == 'sgd':
#             grad = grad_fn(x + np.random.randn()*0.1, y + np.random.randn()*0.1)
#         elif method == 'mini':
#             grad = np.mean([grad_fn(x + np.random.randn()*0.1, y + np.random.randn()*0.1)
#                             for _ in range(batch_size)], axis=0)
#         x -= lr * grad[0]
#         y -= lr * grad[1]
#         path.append((x, y))
#     return np.array(path)

# # Generate paths with different seeds to separate them
# gd_path = optimize('gd', seed=1)
# sgd_path = optimize('sgd', seed=2)
# mini_path = optimize('mini', batch_size=10, seed=3)

# # Plotting
# x_vals = np.linspace(-6, 6, 400)
# y_vals = np.linspace(-6, 6, 400)
# X, Y = np.meshgrid(x_vals, y_vals)
# Z = loss_fn(X, Y)

# plt.figure(figsize=(10, 8), dpi=120)
# plt.contour(X, Y, Z, levels=40, cmap='Greys', alpha=0.5)

# # Plot paths with distinct styles
# plt.plot(gd_path[:, 0], gd_path[:, 1], 'o-', label='Gradient Descent', color='tab:blue', linewidth=2)
# plt.plot(sgd_path[:, 0], sgd_path[:, 1], 'x--', label='SGD', color='tab:red', linewidth=2)
# plt.plot(mini_path[:, 0], mini_path[:, 1], 's-.', label='Mini-Batch SGD', color='tab:green', linewidth=2)

# # Mark start and end
# for path, label, color in zip([gd_path, sgd_path, mini_path],
#                               ['GD', 'SGD', 'Mini'],
#                               ['tab:blue', 'tab:red', 'tab:green']):
#     plt.scatter(*path[0], color=color, marker='*', s=120, label=f'{label} Start')
#     plt.scatter(*path[-1], color=color, marker='X', s=120, label=f'{label} End')

# plt.title('Distinct Optimization Paths')
# plt.xlabel('x')
# plt.ylabel('y')
# plt.legend()
# plt.grid(True)
# plt.tight_layout()
# plt.show()



# AdaGrad, RMSProp, AdaDelta, and SGD with Momentum

import numpy as np
import matplotlib.pyplot as plt

# Rosenbrock function and gradient
def rosenbrock(x, y):
    return (1 - x)**2 + 100 * (y - x**2)**2

def rosenbrock_grad(x, y):
    dx = -2 * (1 - x) - 400 * x * (y - x**2)
    dy = 200 * (y - x**2)
    return np.array([dx, dy])

# Optimizer paths
def optimize(method, lr=0.01, steps=100, seed=42):
    np.random.seed(seed)
    x, y = np.random.randn(2) * 2
    path = [(x, y)]
    eps = 1e-8
    g_accum = np.zeros(2)
    delta_accum = np.zeros(2)
    velocity = np.zeros(2)
    decay = 0.9

    for _ in range(steps):
        grad = rosenbrock_grad(x, y)

        if method == 'adagrad':
            g_accum += grad**2
            update = lr / (np.sqrt(g_accum) + eps) * grad

        elif method == 'rmsprop':
            g_accum = decay * g_accum + (1 - decay) * grad**2
            update = lr / (np.sqrt(g_accum) + eps) * grad

        elif method == 'adadelta':
            g_accum = decay * g_accum + (1 - decay) * grad**2
            update = np.sqrt(delta_accum + eps) / (np.sqrt(g_accum) + eps) * grad
            delta_accum = decay * delta_accum + (1 - decay) * update**2

        elif method == 'momentum':
            velocity = decay * velocity + lr * grad
            update = velocity

        else:
            raise ValueError("Unknown method")

        x -= update[0]
        y -= update[1]
        path.append((x, y))

    return np.array(path)

# Generate paths
methods = ['adagrad', 'rmsprop', 'adadelta', 'momentum']
colors = ['blue', 'green', 'purple', 'orange']
paths = [optimize(m) for m in methods]

# Plotting
x_vals = np.linspace(-2, 2, 400)
y_vals = np.linspace(-1, 3, 400)
X, Y = np.meshgrid(x_vals, y_vals)
Z = rosenbrock(X, Y)

plt.figure(figsize=(12, 8))
plt.contour(X, Y, Z, levels=np.logspace(-1, 3, 30), cmap='gray')

for path, method, color in zip(paths, methods, colors):
    plt.plot(path[:, 0], path[:, 1], label=method.capitalize(), color=color)
    plt.scatter(*path[0], color=color, marker='*', s=100)
    plt.scatter(*path[-1], color=color, marker='X', s=100)

plt.title("Optimizer Paths on Rosenbrock Loss Surface")
plt.xlabel("x")
plt.ylabel("y")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()